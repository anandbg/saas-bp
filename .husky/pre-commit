#!/usr/bin/env bash
# Pre-commit hook for Radiology Reporting App
# Prevents committing sensitive files and ensures code quality

# Exit on error
set -e

# ANSI color codes
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

echo -e "${GREEN}Running pre-commit checks...${NC}"

# =============================================================================
# CHECK 1: Prevent committing forbidden files
# =============================================================================
echo -e "${YELLOW}[1/3] Checking for forbidden files...${NC}"

FORBIDDEN_FILES=(
  "credentials.env"
  "secrets.env"
  "*.pem"
  "*.key"
  "*.p12"
)

# Check for forbidden files (but allow .env.example)
for pattern in "${FORBIDDEN_FILES[@]}"; do
  if git diff --cached --name-only | grep -qE "$pattern"; then
    echo -e "${RED}ERROR: Attempting to commit forbidden file matching pattern: $pattern${NC}"
    echo -e "${RED}These files must NEVER be committed to version control.${NC}"
    echo ""
    echo "To fix this:"
    echo "  1. Remove the file from staging: git reset HEAD <file>"
    echo "  2. Add it to .gitignore if not already present"
    echo "  3. Store credentials in .env.local or environment variables"
    exit 1
  fi
done

# Check for .env files specifically (but allow .env.example and .env.template)
if git diff --cached --name-only | grep -E "^\.env$|^\.env\.local$|^\.env\.development\.local$|^\.env\.test\.local$|^\.env\.production\.local$"; then
  echo -e "${RED}ERROR: Attempting to commit .env file${NC}"
  echo -e "${RED}These files must NEVER be committed to version control.${NC}"
  echo ""
  echo "To fix this:"
  echo "  1. Remove the file from staging: git reset HEAD <file>"
  echo "  2. Add it to .gitignore if not already present"
  echo "  3. Store credentials in .env.local or environment variables"
  exit 1
fi

echo -e "${GREEN}✓ No forbidden files detected${NC}"

# =============================================================================
# CHECK 2: Scan for hardcoded credentials in staged files
# =============================================================================
echo -e "${YELLOW}[2/3] Scanning for hardcoded credentials...${NC}"

CREDENTIAL_PATTERNS=(
  "api_key\s*=\s*['\"][^'\"]+['\"]"
  "apikey\s*=\s*['\"][^'\"]+['\"]"
  "API_KEY\s*=\s*['\"][^'\"]+['\"]"
  "secret\s*=\s*['\"][^'\"]+['\"]"
  "SECRET\s*=\s*['\"][^'\"]+['\"]"
  "password\s*=\s*['\"][^'\"]+['\"]"
  "PASSWORD\s*=\s*['\"][^'\"]+['\"]"
  "token\s*=\s*['\"][^'\"]+['\"]"
  "TOKEN\s*=\s*['\"][^'\"]+['\"]"
  "sk_live_"
  "sk_test_"
  "pk_live_"
  "pk_test_"
  "AIzaSy"
  "-----BEGIN.*PRIVATE KEY-----"
)

STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx|js|jsx|json)$' || true)

if [ -n "$STAGED_FILES" ]; then
  for pattern in "${CREDENTIAL_PATTERNS[@]}"; do
    # Skip checking .env.example files
    MATCHES=$(echo "$STAGED_FILES" | grep -v ".env.example" | xargs grep -nE "$pattern" 2>/dev/null || true)
    if [ -n "$MATCHES" ]; then
      echo -e "${RED}ERROR: Potential hardcoded credential detected!${NC}"
      echo "$MATCHES"
      echo ""
      echo -e "${RED}Never commit API keys, secrets, tokens, or passwords.${NC}"
      echo "Store them in .env.local or environment variables instead."
      exit 1
    fi
  done
fi

echo -e "${GREEN}✓ No hardcoded credentials detected${NC}"

# =============================================================================
# CHECK 3: Run lint-staged
# =============================================================================
echo -e "${YELLOW}[3/3] Running linters on staged files...${NC}"

npx lint-staged

echo -e "${GREEN}✓ All pre-commit checks passed!${NC}"
exit 0
